/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

ct U NUM_DIR = 9
ct U MAX_DIR = NUM_DIR - 1
ct U MID_DIR = MAX_DIR >> 1
ct U MIN_DIR = 0

ct U PLAYER_Y = 64

ct U dead_color = $16
ct U[25] game_palette = U[25](
    $11, $2B, $39,
    $13, $21, $3B,
    $15, $23, $31,
    $17, $25, $33,

    $02, $14, $26,
    $04, $16, $28,
    $06, $18, $2A,
    $08, $1A, $2C,

    $0F)

vars /game
    UF px = 128.0
    UF py_tile = 0.0
    UF pscroll = 0
    UF pspeed = 1.5
    U pscroll_nt = 0

    U pdir = MID_DIR
    U noise_vol = 0
    U held_timer = 0
    Bool rotated = false
    Bool pdead = false

    U[8] score = U[8](0)


nmi game_nmi()
    ct U[NUM_DIR] noise_pitch_table =  U[](2, 4, 6, 7, 8, 7, 6, 4, 2)
    ct U[NUM_DIR] noise_volume_table =  U[](3, 3, 4, 4, 5, 4, 4, 3, 3)

    if ready
        ppu_upload_palette()
        ppu_upload_cliff()

        if rotated && !pdead
            {$400F}(0)
            noise_vol = noise_volume_table[pdir]
            {$400E}(noise_pitch_table[pdir])

        {$400C}(noise_vol | %110000)
        if noise_vol != 0
            noise_vol -= 1

    ppu_upload_oam_poll_pads(0)
    {PPUSTATUS}()
    {PPUSCROLL}($00)
    {PPUSCROLL}(pscroll.a)
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
    {PPUCTRL}(PPUCTRL_NMI_ON | pscroll_nt)

    U puf_mask = %10111 | PUF_LOOP
    if pdead
        puf_mask = %11111
    puf.process(puf_mask)


fn move_player()
    ct SF[NUM_DIR] hspeed_table =  SF[](-1.0, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1.0)
    ct UF[NUM_DIR] vspeed_table =  UF[](1.0, 1.25, 1.5, 1.75, 2.0, 1.75, 1.5, 1.25, 1.0)
    ct U[NUM_DIR] pal2_table =  U[]($26, $26, $26, $36, $30, $37, $26, $26, $26)
    ct U[NUM_DIR] pal3_table =  U[]($21, $21, $3C, $30, $3C, $21, $21, $21, $21)

    if pads[0].pressed & (BUTTON_LEFT | BUTTON_RIGHT)
        held_timer = 3

    if held_timer >= 3
        rotated = false
        if pads[0].held & BUTTON_LEFT && pdir > MIN_DIR
            rotated = true
            pdir -= 1
        if pads[0].held & BUTTON_RIGHT && pdir < MAX_DIR
            rotated = true
            pdir += 1
        held_timer -= 3

    held_timer += 1

    px += UF(hspeed_table[pdir] * pspeed)
    UF sub = UF(vspeed_table[pdir] * pspeed)

    py_tile += sub
    if py_tile > 8
        py_tile -= 8
        inc_score()
        update_cliff()

    pscroll += sub
    if(pscroll >= 240)
        pscroll -= 240
        pscroll_nt ^= PPUCTRL_NT_2800

    palette[13] = pal2_table[pdir]
    palette[14] = pal3_table[pdir]

fn collide_player() Bool
: +inline
    if px < 16
        px = 16
        return true

    if px > (256 - 16)
        px = 256 - 16
        return true

    U i = ((cliff_index + 9) & %11111) >> 1

    if px <= (cliffs[i].begin_hole << 3) + 4
        return true

    if px > (cliffs[i].end_hole << 3) - 4
        return true

    return false

fn inc_score()
    for U i = 0; i < len(score); i += 1
        if i == 2
            pspeed += 0.0625

        score[i] += 1
        if score[i] == 10
            score[i] = 0
        else
            break

fn load_level()
    {PPUSTATUS}()
    {PPUADDR}($20)
    {PPUADDR}($00)

    for U y = 0; y < 30; y += 1
        {PPUDATA}($1)
        for U x = 0; x < 30; x += 1
            {PPUDATA}($00)
        {PPUDATA}($1)

    for U i = 0; i < 64; i += 1
        {PPUDATA}($00)

    {PPUADDR}($2B)
    {PPUADDR}($C0)

    for U i = 0; i < 64; i += 1
        {PPUDATA}($00)

mode game()
: nmi game_nmi

    {PPUCTRL}(0)
    {PPUMASK}(0)

    puf.play_track(puf_track_game)

    palette = game_palette
    ppu_upload_palette()

    load_level()

    for U i = 0; i < len(cliffs); i += 1
        cliffs[i] = Cliff(1, 31)

    {PPUCTRL}(PPUCTRL_NMI_ON)

    while true
        update_pads()

        if pdead
            palette[PALETTE_UBC] = dead_color

            if pads[0].pressed & BUTTON_START
                goto mode main()
                : preserves

        else
            move_player()
            pdead = collide_player()
            if pdead
                puf.play_track(puf_track_death)

        prepare_sprites()
        nmi
