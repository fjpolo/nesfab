// Player constants
ct Int PLAYER_MOVING_REST = 0
ct Int PLAYER_MOVING_RIGHT = 1
ct Int PLAYER_MOVING_LEFT = 2
ct Int PLAYER_MOVING_UP = 2
ct Int PLAYER_MOVING_DOWN = 2
ct Int PLAYER_SPEED_WALK = 2
ct Int PLAYER_SPEED_RUN = 3
ct Int GROUND_SPEED = -5
ct Int PLAYER_INITIAL_X = 128
ct Int PLAYER_INITIAL_Y = 128
// Player width and height
ct Int pw = 15
ct Int ph = 15
ct Int rw = pw - 1
ct Int rh = ph - 1
ct Int lucifer_pw = 15
ct Int lucifer_ph = 15
ct Int lucifer_rw = pw - 1
ct Int lucifer_rh = ph - 1
// Player characters
ct Int CURRENT_PLAYER_LUCI = 0
ct Int CURRENT_PLAYER_FER = 1
ct Int CURRENT_PLAYER_LUCIFER = 2

// Player data struct
struct Player
    SS x
    SSF y
    SS w
    SSF h
    SS rw
    SSF rh
    SF xspeed
    SF yspeed
    U movement
    U this_player
    AnimState anim_state
    U level_index
    Bool is_initialised
    SS camera_x

// Flying
vars /player_globals
    U flying_counter = 0
    Bool flying_enabled = true
ct U LUCIFER_FLYING_COOLDOWN = 102 // (256 ~5[s] -> 2[s] ~102)

// Sprites and animations
data /sprites
    // luci metasprites
    [] sprite_luci_rest
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $53, $00),
            Ms( 0, 0, $54, $00)
        )))
    [] sprite_luci_right_1
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $53, $00),
            Ms( 0, 0, $54, $00)
        )))
    [] sprite_luci_right_2
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $63, $00),
            Ms( 0, 0, $64, $00)
        )))
    [] sprite_luci_right_3
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $73, $00),
            Ms( 0, 0, $74, $00)
        )))
    [] sprite_luci_right_4
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $83, $00),
            Ms( 0, 0, $84, $00)
        )))
    [] sprite_luci_right_5
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $93, $00),
            Ms( 0, 0, $94, $00)
        )))
    [] sprite_luci_left_1
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $53, $00),
            Ms( 0, 0, $54, $00)
        )))
    [] sprite_luci_left_2
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $63, $00),
            Ms( 0, 0, $64, $00)
        )))
    [] sprite_luci_left_3
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $73, $00),
            Ms( 0, 0, $74, $00)
        )))
    [] sprite_luci_left_4
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $83, $00),
            Ms( 0, 0, $84, $00)
        )))
    [] sprite_luci_left_5
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $43, $00),
            Ms( 0,-8, $44, $00),
            Ms(-8, 0, $93, $00),
            Ms( 0, 0, $94, $00)
        )))
    // luci animations
    [] luci_animation_rest
        (make_anim(Fs{}(
            Fs(20,   @sprite_luci_rest)
        )))
    [] luci_animation_right
        (make_anim(Fs{}(
            Fs(10,   @sprite_luci_right_1),
            Fs(10,   @sprite_luci_right_2),
            Fs(10,   @sprite_luci_right_3),
            Fs(10,   @sprite_luci_right_4),
            Fs(10,   @sprite_luci_right_5)
        )))
    [] luci_animation_left
        (make_anim(Fs{}(
            Fs(10,   @sprite_luci_left_1),
            Fs(10,   @sprite_luci_left_2),
            Fs(10,   @sprite_luci_left_3),
            Fs(10,   @sprite_luci_left_4),
            Fs(10,   @sprite_luci_left_5)
        )))

    // fer metasprites
    [] sprite_fer_rest
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $45, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $55, $00),
            Ms( 0, 0, $56, $00)
        )))
    [] sprite_fer_right_1
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $45, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $55, $00),
            Ms( 0, 0, $56, $00)
        )))
    [] sprite_fer_right_2
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $65, $00),
            Ms( 0, 0, $66, $00)
        )))
    [] sprite_fer_right_3
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $75, $00),
            Ms( 0, 0, $76, $00)
        )))
    [] sprite_fer_right_4
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $85, $00),
            Ms( 0, 0, $86, $00)
        )))
    [] sprite_fer_right_5
        (make_metasprite(0, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $95, $00),
            Ms( 0, 0, $96, $00)
        )))
    [] sprite_fer_left_1
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $45, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $55, $00),
            Ms( 0, 0, $56, $00)
        )))
    [] sprite_fer_left_2
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $65, $00),
            Ms( 0, 0, $66, $00)
        )))
    [] sprite_fer_left_3
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $75, $00),
            Ms( 0, 0, $76, $00)
        )))
    [] sprite_fer_left_4
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $85, $00),
            Ms( 0, 0, $86, $00)
        )))
    [] sprite_fer_left_5
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8,-8, $A5, $00),
            Ms( 0,-8, $46, $00),
            Ms(-8, 0, $95, $00),
            Ms( 0, 0, $96, $00)
        )))
    // fer animations
    [] fer_animation_rest
        (make_anim(Fs{}(
            Fs(20,   @sprite_fer_rest)
        )))
    [] fer_animation_right
        (make_anim(Fs{}(
            Fs(10,   @sprite_fer_right_1),
            Fs(10,   @sprite_fer_right_5),
            Fs(10,   @sprite_fer_right_4),
            Fs(10,   @sprite_fer_right_5),
            Fs(10,   @sprite_fer_right_1),
            Fs(10,   @sprite_fer_right_2),
            Fs(10,   @sprite_fer_right_3),
            Fs(10,   @sprite_fer_right_2)
        )))
    [] fer_animation_left
        (make_anim(Fs{}(
            Fs(10,   @sprite_fer_left_1),
            Fs(10,   @sprite_fer_left_5),
            Fs(10,   @sprite_fer_left_4),
            Fs(10,   @sprite_fer_left_5),
            Fs(10,   @sprite_fer_left_1),
            Fs(10,   @sprite_fer_left_2),
            Fs(10,   @sprite_fer_left_3),
            Fs(10,   @sprite_fer_left_2)
        )))
    // lucifer metasprites
    [] sprite_lucifer_rest_right
        (make_metasprite(0, Ms{}(
            Ms(0, -8, $41, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $51, $01),
            Ms(8,  0, $52, $01),
            Ms(0,  8, $61, $01),
            Ms(8,  8, $62, $01)

        )))
    [] sprite_lucifer_rest_left
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(0, -8, $41, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $51, $01),
            Ms(8,  0, $52, $01),
            Ms(0,  8, $61, $01),
            Ms(8,  8, $62, $01)

        )))
    [] sprite_lucifer_right_1
        (make_metasprite(0, Ms{}(
            Ms(0, -8, $41, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $51, $01),
            Ms(8,  0, $52, $01),
            Ms(0,  8, $61, $01),
            Ms(8,  8, $62, $01)
        )))
    [] sprite_lucifer_right_2
        (make_metasprite(0, Ms{}(
            Ms(0, -8, $60, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $71, $01),
            Ms(8,  0, $72, $01),
            Ms(0,  8, $81, $01),
            Ms(8,  8, $82, $01)

        )))
    [] sprite_lucifer_right_3
        (make_metasprite(0, Ms{}(
            Ms(0, -8, $70, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $71, $01),
            Ms(8,  0, $72, $01),
            Ms(0,  8, $91, $01),
            Ms(8,  8, $92, $01)

        )))
    [] sprite_lucifer_left_1
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(0, -8, $41, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $51, $01),
            Ms(8,  0, $52, $01),
            Ms(0,  8, $61, $01),
            Ms(8,  8, $62, $01)

        )))
    [] sprite_lucifer_left_2
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(0, -8, $60, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $71, $01),
            Ms(8,  0, $72, $01),
            Ms(0,  8, $81, $01),
            Ms(8,  8, $82, $01)

        )))
    [] sprite_lucifer_left_3
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(0, -8, $70, $01),
            Ms(8, -8, $42, $01),
            Ms(0,  0, $71, $01),
            Ms(8,  0, $72, $01),
            Ms(0,  8, $91, $01),
            Ms(8,  8, $92, $01)

        )))

    // Animations
    [] lucifer_animation_rest_right
        (make_anim(Fs{}(
            Fs(20,   @sprite_lucifer_rest_right)
        )))
    [] lucifer_animation_rest_left
        (make_anim(Fs{}(
            Fs(20,   @sprite_lucifer_rest_left)
        )))
    [] lucifer_animation_right
        (make_anim(Fs{}(
            Fs(10,   @sprite_lucifer_right_1),
            Fs(10,   @sprite_lucifer_right_2),
            Fs(10,   @sprite_lucifer_right_3)
        )))
    [] lucifer_animation_left
        (make_anim(Fs{}(
            Fs(10,   @sprite_lucifer_left_1),
            Fs(10,   @sprite_lucifer_left_2),
            Fs(10,   @sprite_lucifer_left_3)
        )))

fn make_player(SS x, SS y) Player
    Player p = Player()
    p.x = x
    p.y = SSF(y)
    p.w = pw
    p.h = ph
    p.rw = rw
    p.rh = rh
    p.movement = PLAYER_MOVING_REST
    p.anim_state = AnimState()
    p.camera_x = 0
    return p

fn make_player_luci() Player
    Player p = make_player(PLAYER_INITIAL_X, PLAYER_INITIAL_Y)
    p.this_player = CURRENT_PLAYER_LUCI
    p.anim_state = make_anim_state(@luci_animation_rest)
    p.level_index = 2
    p.is_initialised = true
    return p

fn make_player_fer() Player
    Player p = make_player(PLAYER_INITIAL_X, PLAYER_INITIAL_Y)
    p.this_player = CURRENT_PLAYER_FER
    p.anim_state = make_anim_state(@fer_animation_rest)
    p.level_index = 4
    p.is_initialised = true
    return p

fn make_player_lucifer(Player a) Player
    Player p = Player()
    p.x = a.x
    p.y = a.y
    p.w = lucifer_pw
    p.h = lucifer_ph
    p.rw = lucifer_rw
    p.rh = lucifer_rh
    p.this_player = CURRENT_PLAYER_LUCIFER
    p.movement = PLAYER_MOVING_REST
    p.anim_state = make_anim_state(@lucifer_animation_rest_right)
    p.level_index = a.level_index
    p.is_initialised = true
    return p

fn save_player(Player a) Player
    Player p = Player()
    p.x = a.x
    p.y = a.y
    p.w = a.w
    p.h = a.h
    p.rw = a.rw
    p.rh = a.rh
    p.xspeed = a.xspeed
    p.yspeed = a.yspeed
    p.movement = a.movement
    p.anim_state = a.anim_state
    p.level_index = a.level_index
    p.is_initialised = a.is_initialised
    p.camera_x = a.camera_x
    return p

fn restore_player(Player a) Player
    Player p = Player()
    p.x = a.x
    p.y = a.y
    p.w = a.w
    p.h = a.h
    p.rw = a.rw
    p.rh = a.rh
    p.xspeed = a.xspeed
    p.yspeed = a.yspeed
    p.movement = a.movement
    p.anim_state = a.anim_state
    p.level_index = a.level_index
    p.this_player = a.this_player
    p.is_initialised = a.is_initialised
    p.camera_x = a.camera_x
    return p

fn update_player()
    SS center_x = SS(p.x) + (p.w >> 1)
    SS center_y = SS(p.y) + SS(p.h >> 1)
    // Luci Y Fer in the same level?
    Bool is_lucifer_flying = false
    if current_player == CURRENT_PLAYER_LUCIFER
        is_lucifer_flying = false
        if pads[0].held & BUTTON_B
            is_lucifer_flying = true
    // Fly baby
    if is_lucifer_flying && flying_enabled
        // Countdown of flying capacity
        flying_counter += 1
        if flying_counter == LUCIFER_FLYING_COOLDOWN
            flying_counter = 0
            flying_enabled = false
        SS speed = PLAYER_SPEED_WALK
        if pads[0].held & BUTTON_RIGHT
            if collision_at(UU(p.x + p.rw + speed), UU(p.y)) != C_WALL && collision_at(UU(p.x + p.rw + speed), UU(p.y + p.rh)) != C_WALL
                if p.movement != PLAYER_MOVING_RIGHT
                    p.movement = PLAYER_MOVING_RIGHT
                    p.anim_state = make_anim_state(@lucifer_animation_right)
                p.x += speed
        if pads[0].held & BUTTON_LEFT
            if collision_at(UU(p.x - speed), UU(p.y)) != C_WALL && collision_at(UU(p.x - speed), UU(p.y + p.rh)) != C_WALL
                if p.movement != PLAYER_MOVING_LEFT
                    p.movement = PLAYER_MOVING_LEFT
                    p.anim_state = make_anim_state(@lucifer_animation_left)
                p.x -= speed
        if pads[0].held & BUTTON_UP
            if p.y >= 0
                // logf(@"p.y: %d"l, U(p.y))
                // logf(@"p.h: %d"l, U(p.h))
                // logf(@"speed: %d"l, U(speed))
                // logf(@"p.y - p.h - : %d"l, U(p.y - p.h))
                // logf(@"p.y - speed - : %d"l, U(p.y - SSF(speed)))
                // logf(@"p.y - p.h - speed - : %d"l, U(p.y - p.h - SSF(speed)))
                if collision_at(UU(p.x), UU(p.y - (p.h >> 1) - SSF(speed) - 4)) != C_WALL
                    if p.movement == PLAYER_MOVING_RIGHT
                        p.anim_state = make_anim_state(@lucifer_animation_right)
                    if p.movement == PLAYER_MOVING_LEFT
                        p.anim_state = make_anim_state(@lucifer_animation_left)
                p.y -= speed
        if pads[0].held & BUTTON_DOWN
            SSF half_ph = p.h >> 1
            if collision_at(UU(p.x), UU(p.y + SSF(speed) + 4)) != C_WALL
                if p.movement == PLAYER_MOVING_RIGHT
                    p.anim_state = make_anim_state(@lucifer_animation_right)
                if p.movement == PLAYER_MOVING_LEFT
                    p.anim_state = make_anim_state(@lucifer_animation_left)
                p.y += speed
        // Get tired of flying
        //p.y += 0.1 * flying_counter

    // No flying baby
    if !flying_enabled
        is_lucifer_flying = false
        flying_counter += 1
        if flying_counter == 0
            flying_enabled = true
    //logf(@"fly?: %d"l, is_lucifer_flying)
    // is_lucifer_flying = is_lucifer_flying

    // Luci Y Fer, Lucifer not flying
    if !is_lucifer_flying
        // Update x-position:
        SS speed = PLAYER_SPEED_WALK
        if pads[0].held & BUTTON_B 
            speed = PLAYER_SPEED_RUN
            if current_player == CURRENT_PLAYER_LUCIFER
                speed += 1
        if pads[0].held & BUTTON_LEFT
            if collision_at(UU(p.x - speed), UU(p.y)) != C_WALL && collision_at(UU(p.x - speed), UU(p.y + p.rh)) != C_WALL
                if p.movement != PLAYER_MOVING_LEFT
                    p.movement = PLAYER_MOVING_LEFT
                    switch current_player 
                        case CURRENT_PLAYER_LUCI
                            p.anim_state = make_anim_state(@luci_animation_left)
                            break
                        case CURRENT_PLAYER_FER
                            p.anim_state = make_anim_state(@fer_animation_left)
                            break
                        case CURRENT_PLAYER_LUCIFER
                            p.anim_state = make_anim_state(@lucifer_animation_left)
                            break
                p.x -= speed
        if pads[0].held & BUTTON_RIGHT
            if collision_at(UU(p.x + p.rw + speed), UU(p.y)) != C_WALL && collision_at(UU(p.x + p.rw + speed), UU(p.y + p.rh)) != C_WALL
                if p.movement != PLAYER_MOVING_RIGHT
                    p.movement = PLAYER_MOVING_RIGHT
                    switch current_player
                        case CURRENT_PLAYER_LUCI
                            p.anim_state = make_anim_state(@luci_animation_right)
                            break
                        case CURRENT_PLAYER_FER
                            p.anim_state = make_anim_state(@fer_animation_right)
                            break
                        case CURRENT_PLAYER_LUCIFER
                            p.anim_state = make_anim_state(@lucifer_animation_right)
                            break
                p.x += speed
        
        // Ground
        if current_player != CURRENT_PLAYER_LUCI || (collision_at(UU(center_x), UU(center_y + PLAYER_SPEED_WALK)) != C_LADDER && collision_at(UU(center_x), UU(center_y + SS(p.h) - PLAYER_SPEED_WALK)) != C_LADDER)
            if collision_at(UU(p.x + 0), UU(p.y + p.h)) == C_WALL || collision_at(UU(p.x + p.rw), UU(p.y + p.h)) == C_WALL
                if pads[0].pressed & BUTTON_A
                    if current_player != CURRENT_PLAYER_LUCI
                        p.yspeed = GROUND_SPEED

            // Update y-position:
            SSF new_y = p.y + SSF(p.yspeed)
            p.yspeed += 0.25
            if p.yspeed > 0
                if collision_at(UU(p.x + 0), UU(new_y + p.rh)) == C_WALL || collision_at(UU(p.x + p.rw), UU(new_y + p.rh)) == C_WALL
                    p.yspeed = 0
                    p.y = ((new_y + p.rh) & SSF(~%1111)) - SSF(p.h)
                else
                    p.y = new_y
            else
                if collision_at(UU(p.x + 0), UU(new_y)) == C_WALL || collision_at(UU(p.x + p.rw), UU(new_y)) == C_WALL
                    p.yspeed = 0
                    p.y = (p.y & SSF(~%1111))
                else
                    p.y = new_y
        // Ladder
        else
            if pads[0].held & BUTTON_UP
                if collision_at(UU(p.x), UU(p.y - p.h - PLAYER_SPEED_WALK)) != C_WALL
                    p.y += GROUND_SPEED + PLAYER_SPEED_WALK
            if pads[0].held & BUTTON_DOWN
                if collision_at(UU(p.x), UU(p.y + p.h + PLAYER_SPEED_WALK)) != C_WALL
                    p.y -= GROUND_SPEED + PLAYER_SPEED_WALK      

    // Luci Y Fer same level?
    if luci.level_index == fer.level_index && current_player != CURRENT_PLAYER_LUCIFER
        switch current_player
            case CURRENT_PLAYER_LUCI
                if abs(abs(p.x) - abs(fer.x)) < 8 && abs(abs(p.y) - abs(fer.y)) < 8 
                    p = make_player_lucifer(p)
                    current_player = CURRENT_PLAYER_LUCIFER
                break
            case CURRENT_PLAYER_FER
                if abs(abs(p.x) - abs(luci.x)) < 8 && abs(abs(p.y) - abs(luci.y)) < 8 
                    p = make_player_lucifer(p)
                    current_player = CURRENT_PLAYER_LUCIFER
                break



    // Select - Change player
    if is_select_pressed && current_player != CURRENT_PLAYER_LUCIFER
        log(@"SELECT"l)
        logf(@"player: %d"l, U(current_player))
        is_select_pressed = false
        // Change player
        if current_player == CURRENT_PLAYER_LUCI
            current_player = CURRENT_PLAYER_FER
            luci = save_player(p)
            p = restore_player(fer)
        else if current_player == CURRENT_PLAYER_FER
            current_player = CURRENT_PLAYER_LUCI
            fer = save_player(p)
            p = restore_player(luci)
        // Change level
        current_level_index = p.level_index
        goto mode play_level(current_level_index)
        : preserves /game
    if is_select_pressed && current_player == CURRENT_PLAYER_LUCIFER
        // separete
        fer.x = fer.x - 16
        p = restore_player(luci)
        luci.x = luci.x + 16
        current_player = CURRENT_PLAYER_LUCI
        //luci.camera_x = p.camera_x

    // Resting
    if !pads[0].held && p.movement != PLAYER_MOVING_REST
        switch current_player
            case CURRENT_PLAYER_LUCI
                p.anim_state = make_anim_state(@luci_animation_rest)
                break
            case CURRENT_PLAYER_FER
                p.anim_state = make_anim_state(@fer_animation_rest)
                break
            case CURRENT_PLAYER_LUCIFER
                switch p.movement
                    case PLAYER_MOVING_RIGHT
                        p.anim_state = make_anim_state(@lucifer_animation_rest_right)
                        break
                    case PLAYER_MOVING_LEFT
                        p.anim_state = make_anim_state(@lucifer_animation_rest_left)
                        break
        p.movement = PLAYER_MOVING_REST

    // Check for coin/exit collisions:
    switch collision_at(UU(center_x), UU(center_y)) 
        case C_COIN
            destroy(UU(center_x), UU(center_y))
            break
        case C_EXIT
            if current_player != CURRENT_PLAYER_LUCIFER
                current_level_index += 1
                if current_level_index >= len(levels)
                    current_level_index = 2
                // Update player
                p.level_index = current_level_index
                p.x = PLAYER_INITIAL_X
                p.y = PLAYER_INITIAL_Y
                switch current_player
                    case CURRENT_PLAYER_LUCI
                        luci = save_player(p)
                        break
                    case CURRENT_PLAYER_FER
                        fer = save_player(p)
                        break
            
                if current_level_index >= len(levels)
                    current_level_index = 2
                nmi
                goto mode play_level(current_level_index)
                : preserves /game


    // Update camera:
    ct Int window = 112
    if center_x - p.camera_x < window
        p.camera_x = center_x - window
    else if center_x - p.camera_x > 256 - window
        p.camera_x = center_x - (256 - window)
    p.camera_x = min(max(0, p.camera_x), (SS(current_level_width) << 4) - 256)

    // Save player data
    if current_player == CURRENT_PLAYER_LUCIFER
        luci = save_player(p)
        fer = save_player(p)