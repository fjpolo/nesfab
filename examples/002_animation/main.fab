/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt 
 */

// This example displays an animated metasprite.

data /sprites
    // Here's where we define our metasprite, comprised of four 8x8 tiles:
    [] frame_right
        (make_metasprite(0, Ms{}(
            Ms(-8, -8, $00, $00),
            Ms( 0, -8, $01, $00),
            Ms(-8,  0, $02, $00),
            Ms( 0,  0, $03, $00))))

    [] frame_left
        (make_metasprite(ATTR_H_FLIP, Ms{}(
            Ms(-8, -8, $00, $00),
            Ms( 0, -8, $01, $00),
            Ms(-8,  0, $02, $00),
            Ms( 0,  0, $03, $00))))

    [] frame_right_up
        (make_metasprite(ATTR_V_FLIP, Ms{}(
            Ms(-8, -8, $00, $00),
            Ms( 0, -8, $01, $00),
            Ms(-8,  0, $02, $00),
            Ms( 0,  0, $03, $00))))

    [] frame_left_up
        (make_metasprite((ATTR_V_FLIP | ATTR_V_FLIP), Ms{}(
            Ms(-8, -8, $00, $00),
            Ms( 0, -8, $01, $00),
            Ms(-8,  0, $02, $00),
            Ms( 0,  0, $03, $00))))

    [] animation_right
        (make_anim(Fs{}(
            Fs(60,   @frame_right))))

    [] animation_left
        (make_anim(Fs{}(
            Fs(60,  @frame_left))))

    [] animation_rest
        (make_anim(Fs{}(
            Fs(60,   @frame_right),
            Fs(60,  @frame_left)
        )))
vars
    // Player variables:
    U px = 128
    U py = 120
    AnimState anim_state = AnimState()
    U rest_counter = 0
    Bool resting = true

nmi game_nmi()
    // Update OAM and poll the pads:
    ppu_upload_oam_poll_pads(0)

    // Turn on rendering:
    {PPUMASK}(PPUMASK_SPR_ON | PPUMASK_NO_CLIP)

    // Reset the scroll
    ppu_reset_scroll(0, 0)

mode main()
: nmi game_nmi
    palette = example_palette
    ppu_upload_palette()
    anim_state = make_anim_state(@animation_rest)
    {PPUCTRL}(PPUCTRL_NMI_ON)

    while true
        nmi
        update_pads()
        move_player()
        update_sprites()

fn move_player()
    ct Int SPEED = 2

    if pads[0].held & BUTTON_LEFT
        anim_state = make_anim_state(@animation_left)
        px -= SPEED
        if px == 0
            px = 255
    else if pads[0].held & BUTTON_RIGHT
        anim_state = make_anim_state(@animation_right)
        px += SPEED
        if px == 255
            px = 0

    if pads[0].held & BUTTON_UP
        py -= SPEED
        if py == 0
            py = 240
    else if pads[0].held & BUTTON_DOWN
        py += SPEED
        if py == 240
            py = 0
    if !resting && !pads[0].held && !pads[1].held
         rest_counter += 1
         if rest_counter == 255
            resting = true
    else
        rest_counter = 0
        resting = false
    
fn update_sprites()
    // Our stack index into OAM:
    U o = 0

    o = push_oam_anim(o, px, py, anim_state)

    // Clear the remainder of OAM
    hide_oam(o)

    //
    if rest_counter == 255 && resting
        rest_counter = 0
        anim_state = make_anim_state(@animation_rest)
    anim_state = tick_anim(anim_state, true)


chrrom
    file(fmt, "sprite.png")
